#ifndef STDAFX_H
#define STDAFX_H

#include <cmath>
#include <cassert>
#include <crtdefs.h>

// STL
#include <algorithm>
#include <map>
#include <vector>
#include <stack>
#include <deque>
#include <fstream>
#include <typeindex>

// Windows
#include <windows.h>

// Boost
#include <sstd/boost/assert.hpp>
#include <sstd/boost/call_traits.hpp>
#include <sstd/boost/concept_archetype.hpp>
#include <sstd/boost/concept_check.hpp>
#include <sstd/boost/config.hpp>
#include <sstd/boost/format.hpp>
#include <sstd/boost/iterator.hpp>
#include <sstd/boost/iterator/iterator_adaptor.hpp>
#include <sstd/boost/iterator/iterator_categories.hpp>
#include <sstd/boost/iterator/iterator_facade.hpp>
#include <sstd/boost/iterator/iterator_traits.hpp>
#include <CGAL/boost/iterator/transform_iterator.hpp>
#include <sstd/boost/iterator/zip_iterator.hpp>
#include <sstd/boost/mpl/always.hpp>
#include <sstd/boost/mpl/and.hpp>
#include <sstd/boost/mpl/apply.hpp>
#include <sstd/boost/mpl/apply_wrap.hpp>
#include <sstd/boost/mpl/assert.hpp>
#include <sstd/boost/mpl/begin.hpp>
#include <sstd/boost/mpl/begin_end.hpp>
#include <sstd/boost/mpl/bool.hpp>
#include <sstd/boost/mpl/clear.hpp>
#include <sstd/boost/mpl/contains.hpp>
#include <sstd/boost/mpl/end.hpp>
#include <sstd/boost/mpl/eval_if.hpp>
#include <sstd/boost/mpl/has_key.hpp>
#include <sstd/boost/mpl/has_xxx.hpp>
#include <sstd/boost/mpl/identity.hpp>
#include <sstd/boost/mpl/if.hpp>
#include <sstd/boost/mpl/insert.hpp>
#include <sstd/boost/mpl/insert_fwd.hpp>
#include <sstd/boost/mpl/iterator_range.hpp>
#include <sstd/boost/mpl/iterator_tags.hpp>
#include <sstd/boost/mpl/lambda.hpp>
#include <sstd/boost/mpl/logical.hpp>
#include <sstd/boost/mpl/not.hpp>
#include <sstd/boost/mpl/or.hpp>
#include <sstd/boost/mpl/pair.hpp>
#include <sstd/boost/mpl/placeholders.hpp>
#include <sstd/boost/mpl/push_front.hpp>
#include <sstd/boost/mpl/reverse_fold.hpp>
#include <sstd/boost/mpl/sequence_tag.hpp>
#include <sstd/boost/mpl/set/set0.hpp>
#include <sstd/boost/mpl/vector.hpp>
#include <sstd/boost/none.hpp>
#include <sstd/boost/optional.hpp>
//#include <sstd/boost/parameter.hpp>
//#include <sstd/boost/parameter/binding.hpp>
//#include <sstd/boost/parameter/config.hpp>
//#include <sstd/boost/parameter/keyword.hpp>
//#include <sstd/boost/parameter/macros.hpp>
//#include <sstd/boost/parameter/match.hpp>
//#include <sstd/boost/parameter/name.hpp>
//#include <sstd/boost/parameter/parameters.hpp>
//#include <sstd/boost/parameter/preprocessor.hpp>
//#include <sstd/boost/parameter/value_type.hpp>
#include <sstd/boost/pending/cstddef.hpp>
#include <sstd/boost/preprocessor/arithmetic/dec.hpp>
#include <sstd/boost/preprocessor/arithmetic/inc.hpp>
#include <sstd/boost/preprocessor/arithmetic/sub.hpp>
#include <sstd/boost/preprocessor/cat.hpp>
#include <sstd/boost/preprocessor/comparison/equal.hpp>
#include <sstd/boost/preprocessor/comparison/less_equal.hpp>
#include <sstd/boost/preprocessor/comparison/not_equal.hpp>
#include <sstd/boost/preprocessor/config/config.hpp>
#include <sstd/boost/preprocessor/control/expr_if.hpp>
#include <sstd/boost/preprocessor/control/if.hpp>
#include <sstd/boost/preprocessor/control/iif.hpp>
#include <sstd/boost/preprocessor/debug/error.hpp>
#include <sstd/boost/preprocessor/enum_params.hpp>
#include <sstd/boost/preprocessor/facilities/empty.hpp>
#include <sstd/boost/preprocessor/facilities/intercept.hpp>
#include <sstd/boost/preprocessor/facilities/is_empty.hpp>
#include <sstd/boost/preprocessor/for.hpp>
#include <sstd/boost/preprocessor/identity.hpp>
#include <sstd/boost/preprocessor/iteration/iterate.hpp>
#include <sstd/boost/preprocessor/logical/bool.hpp>
#include <sstd/boost/preprocessor/logical/compl.hpp>
#include <sstd/boost/preprocessor/logical/not.hpp>
#include <sstd/boost/preprocessor/punctuation/comma_if.hpp>
#include <sstd/boost/preprocessor/repeat.hpp>
#include <sstd/boost/preprocessor/repetition/deduce_r.hpp>
#include <sstd/boost/preprocessor/repetition/enum.hpp>
#include <sstd/boost/preprocessor/repetition/enum_binary_params.hpp>
#include <sstd/boost/preprocessor/repetition/enum_params.hpp>
#include <sstd/boost/preprocessor/repetition/enum_shifted.hpp>
#include <sstd/boost/preprocessor/repetition/enum_shifted_params.hpp>
#include <sstd/boost/preprocessor/repetition/enum_trailing.hpp>
#include <sstd/boost/preprocessor/repetition/enum_trailing_params.hpp>
#include <sstd/boost/preprocessor/repetition/for.hpp>
#include <sstd/boost/preprocessor/repetition/repeat.hpp>
#include <sstd/boost/preprocessor/repetition/repeat_from_to.hpp>
#include <sstd/boost/preprocessor/selection/max.hpp>
#include <sstd/boost/preprocessor/seq/elem.hpp>
#include <sstd/boost/preprocessor/seq/enum.hpp>
#include <sstd/boost/preprocessor/seq/first_n.hpp>
#include <sstd/boost/preprocessor/seq/fold_left.hpp>
#include <sstd/boost/preprocessor/seq/for_each.hpp>
#include <sstd/boost/preprocessor/seq/for_each_i.hpp>
#include <sstd/boost/preprocessor/seq/for_each_product.hpp>
#include <sstd/boost/preprocessor/seq/push_back.hpp>
#include <sstd/boost/preprocessor/seq/seq.hpp>
#include <sstd/boost/preprocessor/seq/size.hpp>
#include <sstd/boost/preprocessor/stringize.hpp>
#include <sstd/boost/preprocessor/tuple/eat.hpp>
#include <sstd/boost/preprocessor/tuple/elem.hpp>
#include <sstd/boost/preprocessor/tuple/rem.hpp>
#include <sstd/boost/property_map/property_map.hpp>
#include <sstd/boost/property_map/vector_property_map.hpp>
#include <sstd/boost/random.hpp>
#include <sstd/boost/random/linear_congruential.hpp>
#include <sstd/boost/random/uniform_smallint.hpp>
#include <sstd/boost/random/variate_generator.hpp>
#include <sstd/boost/shared_ptr.hpp>
#include <sstd/boost/thread/tss.hpp>
#include <sstd/boost/tuple/tuple.hpp>
#include <sstd/boost/type_traits.hpp>
#include <sstd/boost/type_traits/add_reference.hpp>
#include <sstd/boost/type_traits/is_base_and_derived.hpp>
#include <sstd/boost/type_traits/is_const.hpp>
#include <sstd/boost/type_traits/is_convertible.hpp>
#include <sstd/boost/type_traits/is_reference.hpp>
#include <sstd/boost/type_traits/is_same.hpp>
#include <sstd/boost/type_traits/remove_const.hpp>
#include <sstd/boost/type_traits/remove_reference.hpp>
#include <sstd/boost/utility.hpp>
#include <sstd/boost/utility/enable_if.hpp>
#include <sstd/boost/utility/result_of.hpp>
#include <sstd/boost/variant.hpp>
#include <sstd/boost/version.hpp>

// CGAL
//#include <CGAL/AABB_traits.h>
//#include <CGAL/AABB_tree.h>
#include <CGAL/assertions.h>
#include <CGAL/basic.h>
#include <CGAL/Bbox_2.h>
#include <CGAL/Bbox_3.h>
#include <CGAL/Cartesian_converter.h>
#include <CGAL/circulator_bases.h>
//#include <CGAL/Compact_container.h>
#include <CGAL/config.h>
#include <CGAL/Default.h>
#include <CGAL/determinant.h>
#include <CGAL/Dimension.h>
#include <CGAL/enum.h>
#include <CGAL/Exact_predicates_exact_constructions_kernel.h>
#include <CGAL/Exact_predicates_inexact_constructions_kernel.h>
#include <CGAL/Exact_predicates_inexact_constructions_kernel.h>
#include <CGAL/Filtered_kernel.h>
#include <CGAL/Filtered_kernel/Cartesian_coordinate_iterator_2.h>
#include <CGAL/Filtered_kernel/Cartesian_coordinate_iterator_3.h>
#include <CGAL/Filtered_predicate.h>
#include <CGAL/function_objects.h>
#include <CGAL/Hilbert_policy_tags.h>
#include <CGAL/hilbert_sort.h>
#include <CGAL/Hilbert_sort_2.h>
#include <CGAL/Hilbert_sort_3.h>
#include <CGAL/Hilbert_sort_base.h>
#include <CGAL/Hilbert_sort_d.h>
#include <CGAL/Hilbert_sort_median_2.h>
#include <CGAL/Hilbert_sort_median_3.h>
#include <CGAL/Hilbert_sort_median_d.h>
#include <CGAL/Hilbert_sort_middle_2.h>
#include <CGAL/Hilbert_sort_middle_3.h>
#include <CGAL/Hilbert_sort_middle_base.h>
#include <CGAL/Hilbert_sort_middle_d.h>
#include <CGAL/Image_3.h>
#include <CGAL/internal/Dummy_tds_3.h>
#include <CGAL/internal/Exact_type_selector.h>
#include <CGAL/internal/info_check.h>
//#include <CGAL/internal/Regular_triangulation_filtered_traits_3.h>
#include <CGAL/internal/Static_filters/Compare_weighted_squared_radius_3.h>
#include <CGAL/internal/Static_filters/Power_side_of_oriented_power_sphere_3.h>
//#include <CGAL/internal/Static_filters/Regular_triangulation_static_filters_traits_3.h>
#include <CGAL/internal/Static_filters/Static_filter_error.h>
#include <CGAL/internal/Static_filters/tools.h>
//#include <CGAL/internal/Triangulation_ds_circulators_3.h>
//#include <CGAL/internal/Triangulation_ds_iterators_3.h>
#include <CGAL/Interval_nt.h>
#include <CGAL/IO/File_medit.h>
#include <CGAL/iterator.h>
#include <CGAL/Iterator_project.h>
#include <CGAL/Kernel/interface_macros.h>
#include <CGAL/Kernel/Type_equality_wrapper.h>
#include <CGAL/Kernel_traits.h>
#include <CGAL/Labeled_image_mesh_domain_3.h>
#include <CGAL/Lazy.h>
#include <CGAL/Lazy_exact_nt.h>
#include <CGAL/Lazy_kernel.h>
//#include <CGAL/Mesher_level.h>
//#include <CGAL/Mesher_level_default_implementations.h>
//#include <CGAL/Mesher_level_visitors.h>
//#include <CGAL/Meshes/Filtered_multimap_container.h>
//#include <CGAL/Meshes/Triangulation_mesher_level_traits_3.h>
//#include <CGAL/Mesh_3/global_parameters.h>
//#include <CGAL/Mesh_3/Mesher_3.h>
//#include <CGAL/Mesh_3/mesh_standard_cell_criteria.h>
//#include <CGAL/Mesh_3/mesh_standard_criteria.h>
//#include <CGAL/Mesh_3/mesh_standard_facet_criteria.h>
//#include <CGAL/Mesh_3/Mesh_surface_cell_base_3.h>
//#include <CGAL/Mesh_3/Refine_cells_3.h>
//#include <CGAL/Mesh_3/Refine_facets_3.h>
//#include <CGAL/Mesh_3/Refine_tets_visitor.h>
//#include <CGAL/Mesh_3/Robust_intersection_traits_3.h>
//#include <CGAL/Mesh_3/Triangle_accessor_primitive.h>
//#include <CGAL/Mesh_3/utilities.h>
//#include <CGAL/Mesh_cell_base_3.h>
#include <CGAL/Mesh_cell_criteria_3.h>
#include <CGAL/Mesh_constant_domain_field_3.h>
#include <CGAL/Mesh_criteria_3.h>
#include <CGAL/Mesh_edge_criteria_3.h>
#include <CGAL/Mesh_facet_criteria_3.h>
#include <CGAL/Mesh_facet_topology.h>
//#include <CGAL/Mesh_vertex_base_3.h>
#include <CGAL/Multiscale_sort.h>
#include <CGAL/number_utils_classes.h>
#include <CGAL/point_generators_3.h>
#include <CGAL/Polygon_2/Polygon_2_simplicity.h>
#include <CGAL/Polygon_2/polygon_assertions.h>
#include <CGAL/Polygon_2_algorithms.h>
//#include <CGAL/Polyhedral_mesh_domain_3.h>
#include <CGAL/Polyhedron_3.h>
#include <CGAL/predicates/predicates_on_weighted_points_cartesian_3.h>
//#include <CGAL/predicates/Regular_triangulation_ftC3.h>
//#include <CGAL/predicates/Regular_triangulation_rtH3.h>
//#include <CGAL/Profile_counter.h>
//#include <CGAL/Regular_triangulation_cell_base_3.h>
#include <CGAL/representation_tags.h>
#include <CGAL/Robust_construction.h>
#include <CGAL/Simple_cartesian.h>
#include <CGAL/spatial_sort.h>
#include <CGAL/Spatial_sort_traits_adapter_3.h>
//#include <CGAL/Surface_mesh_vertex_base_3.h>
#include <CGAL/tags.h>
#include <CGAL/Timer.h>
#include <CGAL/Triangle_accessor_3.h>
//#include <CGAL/Triangulation_3.h>
//#include <CGAL/triangulation_assertions.h>
//#include <CGAL/Triangulation_cell_base_3.h>
//#include <CGAL/Triangulation_data_structure_3.h>
//#include <CGAL/Triangulation_ds_cell_base_3.h>
//#include <CGAL/Triangulation_ds_vertex_base_3.h>
//#include <CGAL/Triangulation_simplex_3.h>
//#include <CGAL/Triangulation_structural_filtering_traits.h>
//#include <CGAL/Triangulation_utils_2.h>
//#include <CGAL/Triangulation_utils_3.h>
//#include <CGAL/Triangulation_vertex_base_3.h>
#include <CGAL/tuple.h>
#include <CGAL/Unique_hash_map.h>
#include <CGAL/utility.h>
//#include <CGAL/Weighted_point.h>

// Mesh_3
/*#include <CGAL_demo/Viewer.h>
#include <CGAL_demo/Plugin_interface.h>
#include <CGAL_demo/Plugin_helper.h>
#include <ui_Meshing_dialog.h>
#include <Scene_polyhedron_item.h>
#include <implicit_functions/Implicit_function_interface.h>
#include <CGAL_demo/Scene_item_with_display_list.h>*/

#endif //STDAFX_H

